<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prem Mallappa</title>
    <link>https://pmallappa.github.io/index.xml</link>
    <description>Recent content on Prem Mallappa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Mar 2017 10:48:31 +0530</lastBuildDate>
    <atom:link href="https://pmallappa.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>XOR Sequence</title>
      <link>https://pmallappa.github.io/blog/2017/03/09/xor-numbers/</link>
      <pubDate>Thu, 09 Mar 2017 10:48:31 +0530</pubDate>
      
      <guid>https://pmallappa.github.io/blog/2017/03/09/xor-numbers/</guid>
      <description>

&lt;p&gt;Started as an an effort to teach programming to the fresh-grads, here . Not that this is the
ultimate way to do it, rather one of the approach to a given problem.&lt;/p&gt;

&lt;h1 id=&#34;the-problem&#34;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;It is stated in
here &lt;a href=&#34;https://www.hackerrank.com/challenges/xor-se&#34;&gt;XOR-Sequence&lt;/a&gt; that given a
sequence of array &amp;lsquo;A&amp;rsquo; of size N, whose contents are as follows.
Assumed array index is &amp;lsquo;i&amp;rsquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-math&#34;&gt;A[0] = 0
A[1] = 1 (A[0] ^ i, i = 1)
A[2] = 3 (A[1] ^ i, i = 2)
A[4] = 0 (A[2] ^ i, i = 3)
....
A[N] = &#39;&#39; (A[N-1] ^ i, i = N)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given values &amp;rsquo;S&amp;rsquo; and &amp;lsquo;E&amp;rsquo;, for Start and End respectively, find out&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-math&#34;&gt;A[S] ^ A[S+1] ^ A[S+2] ^ .... ^ A[E-1] ^ A[E]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;let-the-computer-do-the-work&#34;&gt;Let the computer do the work&lt;/h1&gt;

&lt;p&gt;In order to know what the sequence look like, I wrote a simple program, which
generates given sequence to a known number. Say for eg 6, it will generate sequence upto i=6&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main
import (&amp;quot;fmt&amp;quot;)
func main() {
	var n, lastXOR uint64
	fmt.Scanf(&amp;quot;%d&amp;quot;, &amp;amp;n);
	for i:=uint64(0) ; i &amp;lt; n; i++ {
		fmt.Printf(&amp;quot;%2d, &amp;quot;, lastXOR^i)
		lastXOR ^= i
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please note this program may run for longer time if larger integers are given,
but we get the essence of it just by running it for smaller number like &lt;code&gt;&amp;lt; 100&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo 28 | go run xorgen.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voila ..&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt; 0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24, 25, 26, 27  28
 0,  1,  3,  0,  4,  1,  7,  0,  8,  1, 11,  0, 12,  1, 15,  0, 16,  1, 19,  0, 20,  1, 23,  0, 24,  1, 27,  0, 28
 ^               ^               ^               ^               ^               ^               ^               ^
 |               |               |               |               |               |               |               |

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;first-implementation&#34;&gt;First Implementation&lt;/h1&gt;

&lt;p&gt;Of course, my first implementation failed miserably with large input sequence.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func getXOR(start, end int) int {
    var lastXOR int
    for ; start &amp;lt; end; start++ {
        lastXOR ^= start
    }
    return lastXOR
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For most of the test cases it didn&amp;rsquo;t even computed results to full extent, on my
laptop it ran for 2 hours for an input sequence. Online system times out with a
compute-intensive operation like above.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;19
269656199  494630864
130226563  341217047
731964916  832420216
542340130  797666540
23301452   870008140
380088525  890526489
187177803  354216263
615371739  904830084
37808192   762275257
269603062  408398609
15763251   94286582
602143487  683191883
524044437  648225039
10725691   939564919
415709950  439717791
29711842   652998599
81933645   201678107
254074327  383133442
5665651    179364774
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like there is definitely something we can do so that it is computed with &lt;code&gt;O(1)&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;xor-patterns&#34;&gt;XOR patterns&lt;/h1&gt;

&lt;p&gt;We have all learnt at one time or the other in our lives about Bitwise XOR operation&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;OP1&lt;/th&gt;
&lt;th&gt;OP2&lt;/th&gt;
&lt;th&gt;XOR&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Also we see a repeated pattern, if (i MOD 4) result of all the XOR operation is
equal to &amp;lsquo;i&amp;rsquo;, Just to remind, &amp;lsquo;i&amp;rsquo; is the index of array
In other words, at i,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;when (i MOD 4 == 0), A[i] == i
when (i MOD 4 == 1), A[i] == 1
when (i MOD 4 == 2), A[i] == i + 1
when (i MOD 4 == 3), A[i] == 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also when &lt;code&gt;i MOD 4 == 0&lt;/code&gt;, and&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-math&#34;&gt;i ^ i+1 ^ i+2 ^ i+3 = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given the above pattern, we can split the entire sequence into 4 integers
sequence, starting at first multiple of 4 after &lt;code&gt;start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We know that,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-math&#34;&gt;a ^ 0 = a
a ^ a = 0
a ^ b ^ c = (a ^ b) ^ c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, if &lt;code&gt;start=29&lt;/code&gt; and &lt;code&gt;end = 82&lt;/code&gt; we can split the entire sequence
leaving out &lt;code&gt;29-31&lt;/code&gt;, and &lt;code&gt;80-82&lt;/code&gt; as they do not make up to the &lt;code&gt;4th&lt;/code&gt; number
slot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;32-35   -- A1
36-39   -- A2
40-43   -- A3 
44-47   -- A4
...
76-79   -- A9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hence we can write the sequence as (again leaving out &lt;code&gt;29-31&lt;/code&gt; and &lt;code&gt;80-82&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;A1 ^ A2 ^ A3 ^ A4 ^...^ A9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;we can check that, each slot (&lt;code&gt;A1&lt;/code&gt;, &lt;code&gt;A2&lt;/code&gt; &amp;hellip;  here, XOR upto &lt;code&gt;2&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;32 ^ 33 ^ 34 ^ 35 = 2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And we know that each of &lt;code&gt;Ax&lt;/code&gt;is &lt;code&gt;2&lt;/code&gt; from above.&lt;/p&gt;

&lt;p&gt;All we have to calculate is &lt;code&gt;A1 ^...^ A9&lt;/code&gt; is &lt;strong&gt;odd&lt;/strong&gt; or &lt;strong&gt;even&lt;/strong&gt; number of slots.
Because, if we have odd number the result of &lt;code&gt;A1 ^ A2 ^ .... ^ (2*An + 1)&lt;/code&gt; is
&lt;code&gt;2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally if there are even number of slots, it results to &lt;code&gt;0&lt;/code&gt; as &lt;code&gt;A1=2&lt;/code&gt; and &lt;code&gt;A2=2&lt;/code&gt;
&lt;code&gt;A1 ^ A2 = 0&lt;/code&gt; every send term cancels the one before it.&lt;/p&gt;

&lt;p&gt;In our example, we just have to calculate &lt;code&gt;A[29] ^ A[30] ^ A[31]&lt;/code&gt; and &lt;code&gt;A[80] ^
A[81] ^ A[82]&lt;/code&gt;, each of the elements have fixed values from our very first
program which implements crude way of XOR&amp;rsquo;ing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A[28] = 28
A[29] = 1      &amp;lt;--+
A[30] = 30        |- XOR
A[31] = 0      &amp;lt;--+ 
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;analysis&#34;&gt;Analysis&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;O(1)&lt;/code&gt; means the code runs in constant time. In our above example, we see if we
isolate the first and last slots, the in-between slots only contribute as &lt;code&gt;0&lt;/code&gt; or
&lt;code&gt;2&lt;/code&gt; depending on if number slots are &lt;strong&gt;&lt;em&gt;even&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;odd&lt;/em&gt;&lt;/strong&gt; respectively&lt;/p&gt;

&lt;h1 id=&#34;the-code&#34;&gt;The Code&lt;/h1&gt;

&lt;p&gt;Following code gets the last slot XORed&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func getLastXOR(start uint64) uint64 {
	var lastXOR uint64 = 0
	idx := start % 4
	switch idx {
	case 3:
		lastXOR = 2
	case 2:
		lastXOR ^= (start + 1)
		start--
		fallthrough
	case 1:
		lastXOR ^= 1
		start--
		fallthrough
	case 0:
		lastXOR ^= start
	}
	return lastXOR
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one calculates the first slot&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func getNextXOR(start uint64) uint64 {
	var nextXOR uint64
	idx := start % 4
	switch idx {
	case 0:
		nextXOR = 2
		start++
	case 1:
		nextXOR ^= 1
		start++
		fallthrough
	case 2:
		nextXOR ^= start + 1
		start++
		fallthrough
	case 3:
		nextXOR ^= 2
	}

	return nextXOR
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one calculates the number of slots if odd or even and adjust the &lt;code&gt;start&lt;/code&gt; to
next available multiple of &lt;code&gt;4&lt;/code&gt;. As well as adjust the &lt;code&gt;end&lt;/code&gt; to previous availble multiple of &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func calculate(start, end uint64) uint64 {
	newstart := start
	if start%4 != 0 {
		newstart = start + 4 - start%4
	}
	newend := end - end%4
	diff := newend - newstart
	div := diff / 4 % 2
	if div != 0 { // even slots
		return getNextXOR(start) ^ getLastXOR(end)
	}
	// odd number of slots
	return getNextXOR(start) ^ getLastXOR(end) ^ 2
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;=== OVER AND OUT ===&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>resume</title>
      <link>https://pmallappa.github.io/resume/</link>
      <pubDate>Thu, 01 Dec 2016 23:05:23 +0530</pubDate>
      
      <guid>https://pmallappa.github.io/resume/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Services</title>
      <link>https://pmallappa.github.io/services/</link>
      <pubDate>Thu, 01 Dec 2016 22:50:52 +0530</pubDate>
      
      <guid>https://pmallappa.github.io/services/</guid>
      <description>

&lt;style&gt;
.h1{
  font-size: 210%;
  font-variant: bold;
}
h2 {
  font-size: 180%;
}
h3 {
  font-size: 140%;
  text-decoration: underline;
}
h4 {
  font-size: 110%;
  font-variant: bold;
}
&lt;/style&gt;

&lt;p&gt;I offer consultation to startups and established corporations. I would like to work as an independent contractor for a particlar task.
I have close to 15 years of experience in &lt;strong&gt;Embedded Systems&lt;/strong&gt;, &lt;strong&gt;ARM&lt;/strong&gt;, &lt;strong&gt;ARM64&lt;/strong&gt; and &lt;strong&gt;MIPS&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;training&#34;&gt;Training&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#arm&#34;&gt;ARM&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#arm-v7-introduction&#34;&gt;ARM v7 Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#arm-v7-advanced-architecture&#34;&gt;ARM v7 Architecture &amp;amp; Advanced Concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#arm-v8-advanced&#34;&gt;ARM v8 Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linux&#34;&gt;Linux&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#linux-basics-and-programming&#34;&gt;Linux Basics &amp;amp; Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#advanced-linux-programming&#34;&gt;Advanced Linux Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kernel-programming-and-driver-framework&#34;&gt;Kernel Programming &amp;amp; Driver Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kernel-internals&#34;&gt;Kernel Internals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#miscallaneous&#34;&gt;Miscallaneous&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#python-programming&#34;&gt;Python Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#advanced-c-programming&#34;&gt;Advanced C Programming&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;arm&#34;&gt;ARM&lt;/h2&gt;

&lt;p&gt;I offer state-of-the-art &lt;strong&gt;ARM&lt;/strong&gt; training, hands-on and workshop based at client&amp;rsquo;s locations
Thare are introductory training and can be done in &lt;em&gt;1&lt;/em&gt;, &lt;em&gt;2&lt;/em&gt; or &lt;em&gt;3&lt;/em&gt; day material. Depending on individual needs, the duration and content can be customized&lt;/p&gt;

&lt;h3 id=&#34;arm-v7-introduction&#34;&gt;ARM v7 Introduction&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Introduction to ARM, ARM as a company&lt;/li&gt;
&lt;li&gt;ARM History, background and naming convention&lt;/li&gt;
&lt;li&gt;ARM Registers set&lt;/li&gt;
&lt;li&gt;ARM Instructions

&lt;ul&gt;
&lt;li&gt;Data movment&lt;/li&gt;
&lt;li&gt;Branching&lt;/li&gt;
&lt;li&gt;Load Store&lt;/li&gt;
&lt;li&gt;Miscallaneous&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Programming in Assembly&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;arm-v7-advanced-architecture&#34;&gt;ARM v7 Advanced Architecture&lt;/h3&gt;

&lt;p&gt;In this module we will discuss the advanced concepts such as &lt;code&gt;virtualization&lt;/code&gt; ,  &lt;code&gt;memory management&lt;/code&gt; and &lt;code&gt;GICv3&lt;/code&gt; interrupt handling.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exception Handling&lt;/li&gt;
&lt;li&gt;Operating Modes&lt;/li&gt;
&lt;li&gt;Switching between Modes&lt;/li&gt;
&lt;li&gt;Operating system Concepts&lt;/li&gt;
&lt;li&gt;Cache and Cache operation&lt;/li&gt;
&lt;li&gt;System Control Co-processor&lt;/li&gt;
&lt;li&gt;MMU Unit&lt;/li&gt;
&lt;li&gt;Cache configuration, locking, invalidating and flushing&lt;/li&gt;
&lt;li&gt;Booting up a v7 machine&lt;/li&gt;
&lt;li&gt;V7 Virtualization enhancements&lt;/li&gt;
&lt;li&gt;GICv3 Interrupt Handling&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;arm-v8-advanced-architecture&#34;&gt;ARM v8 Advanced Architecture&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;

&lt;h3 id=&#34;linux-basics-and-programming&#34;&gt;Linux Basics and Programming&lt;/h3&gt;

&lt;h4 id=&#34;introduction-to-linux&#34;&gt;Introduction to Linux&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Terminal and Shell&lt;/li&gt;
&lt;li&gt;Command line&lt;/li&gt;
&lt;li&gt;How your programs startup&lt;/li&gt;
&lt;li&gt;Linux Filesystem&lt;/li&gt;
&lt;li&gt;Shell scripting basics&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;advanced-linux-programming&#34;&gt;Advanced Linux Programming&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Process and process control&lt;/li&gt;
&lt;li&gt;File Management&lt;/li&gt;
&lt;li&gt;Memory Management

&lt;ul&gt;
&lt;li&gt;MMAP, accessing hardware in userspace&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Synchronization&lt;/li&gt;
&lt;li&gt;IPC (Inter-Process Communication)&lt;/li&gt;
&lt;li&gt;Compiling and debugging programs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;kernel-programming-and-driver-framework&#34;&gt;Kernel Programming and Driver framework&lt;/h3&gt;

&lt;p&gt;Kernel Programming introduction and Introduction to device driver framework&lt;/p&gt;

&lt;h5 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#linux-basics-and-programming&#34;&gt;Linux Basics &amp;amp; Programming&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#advanced-linux-programming&#34;&gt;Advanced Linux Programming&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kernel Module Vs Application Namespace,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Basic Kernel Services,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linux Kernel Code, Kernel Hello world,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Loading/Unloading Modules,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linux Kernel Tree,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linux Source Code,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linux Kernel Configuration.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Writing a Simple Device Driver&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Insert/Remove driver&lt;/li&gt;
&lt;li&gt;Driver framework&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kernel synchronization Machanisms&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Race condition&lt;/li&gt;
&lt;li&gt;Semaphore/mutex usage&lt;/li&gt;
&lt;li&gt;Deadlock and prevention&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Interrupt handling and tasklets&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wait queues and Kernel threads&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;kernel-internals&#34;&gt;Kernel Internals&lt;/h3&gt;

&lt;p&gt;This course is not for the faint hearted, this introduces to Linux kernel and its development of 25 years. Its also not recommended for the device driver enthusiasts as it deals with core kernel components.&lt;/p&gt;

&lt;h4 id=&#34;prerequisites-1&#34;&gt;Prerequisites&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#linux-basics-and-programming&#34;&gt;Linux Basics &amp;amp; Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#advanced-linux-programming&#34;&gt;Advanced Linux Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kernel-programming-and-driver-framework&#34;&gt;Kernel Programming &amp;amp; Driver Framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;contents&#34;&gt;Contents&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Process and Its representation on Kernel

&lt;ul&gt;
&lt;li&gt;task, struct and clone(), fork(), vfork()&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Kernel Synchronization

&lt;ul&gt;
&lt;li&gt;Per CPU variables&lt;/li&gt;
&lt;li&gt;atomic operation, variables, spinlocks, rw-locks&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Kernel data-structures

&lt;ul&gt;
&lt;li&gt;Trees, rb-tree, lists etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Timing measurement in Linux

&lt;ul&gt;
&lt;li&gt;How kernel keeps track of time&lt;/li&gt;
&lt;li&gt;tickless, hr-timer and jiffies etc..&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Memory management

&lt;ul&gt;
&lt;li&gt;pagefaults and slab,slub,slob allocators&lt;/li&gt;
&lt;li&gt;page allocation and reclaimation&lt;/li&gt;
&lt;li&gt;page overcommiting, CMA (continous memory allocator)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Linux virtual filesystem&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;miscallaneous&#34;&gt;Miscallaneous&lt;/h2&gt;

&lt;h3 id=&#34;python-programming&#34;&gt;Python Programming&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Python programming concepts&lt;/li&gt;
&lt;li&gt;Introduction to IDLE and command line based python applications&lt;/li&gt;
&lt;li&gt;Syntax and writing Hello World&lt;/li&gt;
&lt;li&gt;Introduction to functional programming&lt;/li&gt;
&lt;li&gt;Writing small programs&lt;/li&gt;
&lt;li&gt;importing other libraries&lt;/li&gt;
&lt;li&gt;Control structure

&lt;ul&gt;
&lt;li&gt;If, if-else, try-except, loops and iterators&lt;/li&gt;
&lt;li&gt;Iterators, Generators&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Advanced Concepts

&lt;ul&gt;
&lt;li&gt;Interfacing with C&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Object Oriented programming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Added Python development&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Django Web App development&lt;/li&gt;
&lt;li&gt;Python Web framework

&lt;ul&gt;
&lt;li&gt;routing&lt;/li&gt;
&lt;li&gt;templating&lt;/li&gt;
&lt;li&gt;data-managment&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;advanced-c-programming&#34;&gt;Advanced C Programming&lt;/h3&gt;

&lt;h4 id=&#34;prerequisites-2&#34;&gt;Prerequisites&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Basic C Programming&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;contents-1&#34;&gt;Contents&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Structure and representation&lt;/li&gt;
&lt;li&gt;Advanced usage of enums and error propagation&lt;/li&gt;
&lt;li&gt;Unix System programming&lt;/li&gt;
&lt;li&gt;IPC usage and examples programs&lt;/li&gt;
&lt;li&gt;Programming for 64-bit IA-32, IA-64 and ARM64, MIPS64

&lt;ul&gt;
&lt;li&gt;Things to take care of while programming for 64-bit architecture&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Pointers and pointer arithmetic

&lt;ul&gt;
&lt;li&gt;Invalid and dangling pointers&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Data-type and conversion rules&lt;/li&gt;
&lt;li&gt;Function pointer and usage&lt;/li&gt;
&lt;li&gt;Pre-processors, tricks, traps-and-pitfalls&lt;/li&gt;
&lt;li&gt;STDIO library&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>My first night with hugo</title>
      <link>https://pmallappa.github.io/blog/2016/11/30/my-first-night-with-hugo/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pmallappa.github.io/blog/2016/11/30/my-first-night-with-hugo/</guid>
      <description>

&lt;h2 id=&#34;what-happens-in-there&#34;&gt;What happens in there&lt;/h2&gt;

&lt;p&gt;Okay, Before it gets any weirder, &lt;a href=&#34;http://www.hugo.com&#34;&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/a&gt; is a blogging
engine. Write a bunch of files in markdown syntax and &lt;strong&gt;Hugo&lt;/strong&gt; will render it
for you. When all is done, and you are &lt;em&gt;satisfied&lt;/em&gt;, it can be taken to next
step.&lt;/p&gt;

&lt;h2 id=&#34;where-to-begin&#34;&gt;Where to begin&lt;/h2&gt;

&lt;p&gt;In all the ocean of knowledge, an important question to ask is where the
&lt;strong&gt;Hell&lt;/strong&gt; I start ?&lt;/p&gt;

&lt;p&gt;There were so many blogging engines, With my initial encounter with &lt;a href=&#34;http://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;,
&lt;a href=&#34;http://www.octopress.org&#34;&gt;Octopress&lt;/a&gt; etc., I thought I may never start.&lt;/p&gt;

&lt;p&gt;To my surprise, &lt;em&gt;Hugo&lt;/em&gt; came to rescue.&lt;/p&gt;

&lt;h2 id=&#34;never-thought-this-would-happen&#34;&gt;Never thought this would happen&lt;/h2&gt;

&lt;p&gt;It was a bliss and with a few command strokes my blog is up and running&lt;/p&gt;

&lt;h2 id=&#34;setting-up&#34;&gt;Setting up&lt;/h2&gt;

&lt;p&gt;Much of the information is presented in a better manner on hugo&amp;rsquo;s documents
Please refer that. We discuss setting up a github pages (static content). My
goal is to have a single repository that serves as fully deployed html files
from a &lt;code&gt;gh-pages&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;Another branch say &lt;code&gt;master&lt;/code&gt; saves all the static contents of this site.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-hugo&#34;&gt;Setting up hugo&lt;/h3&gt;

&lt;p&gt;As mentioned above, please refer Hugo&amp;rsquo;s documentation for this&lt;/p&gt;

&lt;h3 id=&#34;setting-up-your-site&#34;&gt;Setting up your site&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hugo new site &amp;lt;site&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &amp;lsquo;site&amp;rsquo; is the name of the site for your disposal.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-your-categories&#34;&gt;Setting up your categories&lt;/h3&gt;

&lt;p&gt;It is better to categorize contents that one will write on their pages.&lt;/p&gt;

&lt;h2 id=&#34;writing-your-first-blog&#34;&gt;Writing your first Blog&lt;/h2&gt;

&lt;h2 id=&#34;changing-your-home-page&#34;&gt;Changing your home page&lt;/h2&gt;

&lt;p&gt;My personal preference is to have a separate home page which doens&amp;rsquo;t right away
thow the blog/ in the visitors face.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>