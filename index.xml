<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prem Mallappa</title>
    <link>https://pmallappa.github.io/index.xml</link>
    <description>Recent content on Prem Mallappa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Mar 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://pmallappa.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Beamer custom class</title>
      <link>https://pmallappa.github.io/blog/2017/03/11/beamer-not-beamer/</link>
      <pubDate>Sat, 11 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pmallappa.github.io/blog/2017/03/11/beamer-not-beamer/</guid>
      <description>

&lt;h1 id=&#34;what-is-beamer&#34;&gt;What is Beamer&lt;/h1&gt;

&lt;p&gt;Beamer is a presentation making tool using LaTeX. Now, one may ask&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is LaTeX ?&lt;/strong&gt; &lt;br /&gt;
In short, its a document typeset system.&lt;/p&gt;

&lt;p&gt;LaTeX(Created by computer hacker &lt;a href=&#34;https://en.wikipedia.org/wiki/Leslie_Lamport&#34;&gt;&lt;strong&gt;Leslie B. Lamport&lt;/strong&gt;&lt;/a&gt;) is a set of macros on top of the &lt;em&gt;raw&lt;/em&gt; TeX (A very powerful typesetting
system created by &lt;a href=&#34;https://en.wikipedia.org/wiki/Donald_Knuth&#34;&gt;&lt;strong&gt;Sir Don Knuth&lt;/strong&gt;&lt;/a&gt;.)&lt;/p&gt;

&lt;h1 id=&#34;using-metropolis-template&#34;&gt;Using Metropolis template&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\usetheme{metropolis}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;some-macros&#34;&gt;Some macros&lt;/h1&gt;

&lt;p&gt;Here we are re-defining the minted environment not to report errors when it
cannot parse.&lt;/p&gt;

&lt;p&gt;And using includegraphics to include image which keeps the aspect ratio.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\AtBeginEnvironment{minted}{\renewcommand{\fcolorbox}[4][]{#4}}
\AtBeginSection[]{\begin{frame}&amp;lt;beamer&amp;gt;\frametitle{Topic}\tableofcontents[currentsection]\end{frame}}
\LetLtxMacro{\OldIncludegraphics}{\includegraphics}
\renewcommand{\includegraphics}[2][]{\OldIncludegraphics[height=0.8\textheight,keepaspectratio, #1]{#2}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;the-header&#34;&gt;The header&lt;/h1&gt;

&lt;p&gt;Use the metropolis theme to construct the pages, here we are selecting a 16:9
aspect ratio to beamer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\documentclass[presentation,t,aspectratio=169,allowframebreaks,10pt]{beamer}
\usepackage[T1]{fontenc}
\usepackage{fixltx2e}
\usepackage{graphicx}
\tolerance=1000
\usepackage[outputdir=build/]{minted}
\usepackage{xcolor}
\usepackage[english]{babel}

\usepackage{draftwatermark}
\SetWatermarkText{Confidential}
\SetWatermarkScale{3}
\SetWatermarkFontSize{2cm}
\titlegraphic{\hfill \includegraphics[height=1.5cm]{images/VISHAARGA-logo.png}}
\institute[INST]{Vishaarga Software (P) Ltd. \\\url{http://www.vishaarga.com}}
\usepackage{vspl-beamer-template}

\author{Prem Mallappa}
\date{\today}
\title{Advanced \\ C Programming}

\usepackage{multicol}
\usetheme[sectionpage=none, subsectionpage=progressbar]{metropolis} % Use metropolis theme 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;style&#34;&gt;Style&lt;/h1&gt;

&lt;h2 id=&#34;defining-the-document-colors&#34;&gt;Defining the document colors&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\definecolor{vsplblue}{HTML}{00a1e5}
\definecolor{vsplbggray}{HTML}{efefef}
\definecolor{vsplRed}{RGB}{255,  92, 168}
\definecolor{vsplGreen}{RGB}{90, 168,   0}
\definecolor{vsplBlue}{RGB}{0, 152, 233}
\definecolor{vsplYellow}{RGB}{242, 147,  24}
\colorlet{vsplViolet}{vsplRed!50!vsplBlue}
\colorlet{vsplBrown}{vsplRed!50!vsplGreen}
\colorlet{vsplOrange}{vsplRed!50!vsplYellow}
\colorlet{vsplCyan}{vsplGreen!50!vsplBlue}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now set the document colors using the above definitions&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\setbeamercolor{section in toc}{fg=vsplblue,bg=vsplbggray}
\setbeamercolor{subsection in toc}{fg=vsplblue,bg=vsplbggray}
\setbeamercolor{alerted text}{fg=vsplblue!80!gray}
\setbeamercolor*{palette primary}{fg=vsplblue!60!black,bg=gray!30!white}
\setbeamercolor*{palette secondary}{fg=vsplblue!70!black,bg=gray!15!white}
\setbeamercolor*{palette tertiary}{bg=vsplblue!80!black,fg=gray!10!white}
\setbeamercolor*{palette quaternary}{fg=vsplblue,bg=gray!5!white}

\setbeamercolor*{sidebar}{fg=vsplblue,bg=gray!15!white}
\setbeamercolor{progress bar}{fg=vsplYellow}

\setbeamercolor*{palette sidebar primary}{fg=vsplblue!10!black}
\setbeamercolor*{palette sidebar secondary}{fg=white}
\setbeamercolor*{palette sidebar tertiary}{fg=vsplblue!50!black}
\setbeamercolor*{palette sidebar quaternary}{fg=gray!10!white}

%\setbeamercolor*{titlelike}{parent=palette primary}
\setbeamercolor{titlelike}{parent=palette primary,fg=vsplblue}
\setbeamercolor{frametitle}{bg=vsplbggray,fg=vsplblue}
\setbeamercolor{frametitle right}{bg=gray!60!white}

\setbeamercolor{background canvas}{bg=vsplbggray}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fonts&#34;&gt;Fonts&lt;/h2&gt;

&lt;p&gt;I have mainly used OSWALD font for headings, and &lt;em&gt;Merriweather&lt;/em&gt; for normal font.&lt;/p&gt;

&lt;h2 id=&#34;let-the-fonts-rule&#34;&gt;Let the fonts rule&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\defaultfontfeatures{Ligatures=TeX} % makes this a feature of all selected fonts

\newfontfamily{\titleFont}[%
		Path = fonts/oswald/, %
		UprightFont = *-Regular, %
		ItalicFont = *-RegularItalic, %
		BoldFont = *-Bold,
]{Oswald}
\newenvironment{titlefont}{\titleFont}{\par}
\DeclareTextFontCommand{\texttitleFont}{\titleFont}

\setmainfont[%
	Path= fonts/merriweather/,%
	UprightFont = *-Regular,%
	ItalicFont = *-Italic,%
	BoldFont = *-Bold,%
	SmallCapsFont = *-Regular,%
]{MerriweatherSans}

\setsansfont[%
	Path= ./fonts/merriweather/,%
	UprightFont = *-Regular,%
	ItalicFont = *-Italic,%
	BoldFont = *-Bold,%
	SmallCapsFont = *-Regular,
]{Merriweather}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;set-the-fonts&#34;&gt;Set the fonts&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\setmonofont{Fira Mono} % sets the monospace font

\setbeamerfont{title}{size=\Huge,family=\titleFont}
\setbeamerfont{section title}{size=\LARGE,family=\titleFont}
\setbeamerfont{frametitle}{size=\LARGE,series=\mdseries,family=\titleFont}

\defbeamertemplate{section in toc}{mine stupid}{%
	{\LARGE\titleFont %
	\inserttocsection\par}}
\setbeamertemplate{section in toc}[mine stupid]

\defbeamertemplate{subsection in toc}{mine stupid}{%
	{\normalsize\titleFont %
	\inserttocsubsection\par}}
\setbeamertemplate{subsection in toc}[mine stupid]

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;finally-the-subsectionpage&#34;&gt;Finally the subsectionpage&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\AtBeginSubsection[]
{
  \begin{frame}[plain, t]
	\begin{multicols}{2}
	\vspace*{0.3\textheight}
	{\color{vsplBlue}{\LARGE\titleFont\insertsection}}
	\begin{minipage}{.9\linewidth}
		{\color{vsplYellow}\hrule width \hsize height 1pt} \kern .5mm %
		%{\color{vsplBlue}\hrule width \hsize height 1pt} \kern .5mm %
		%{\color{vsplGreen}\hrule width \hsize height 1pt}
    %\insertprogressbar
	\end{minipage}%
	\vfill
	\pagebreak
       \tableofcontents[%currentsection,
	       currentsubsection, 
         %hideothersubsections, 
         sectionstyle=hide,
         subsectionstyle=show/shaded,
       ]
	\vfill
	\end{multicols}
  \end{frame}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;the-result&#34;&gt;The result&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;../images/beamer-first.png&#34; alt=&#34;Beamer cover page&#34; title=&#34;Beamer First Page&#34; /&gt; &lt;img src=&#34;../images/beamer-second.png&#34; alt=&#34;Beamer cover page&#34; title=&#34;Beamer Index Page&#34; /&gt; &lt;img src=&#34;../images/beamer-content.png&#34; alt=&#34;Beamer cover page&#34; title=&#34;Content Page&#34; /&gt; &lt;img src=&#34;../images/beamer-content-2.png&#34; alt=&#34;split-page&#34; title=&#34;Split page&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>XOR Sequence</title>
      <link>https://pmallappa.github.io/blog/2017/03/09/xor-numbers/</link>
      <pubDate>Thu, 09 Mar 2017 10:48:31 +0530</pubDate>
      
      <guid>https://pmallappa.github.io/blog/2017/03/09/xor-numbers/</guid>
      <description>

&lt;p&gt;Started as an an effort to teach programming to the fresh-grads, here . Not that this is the
ultimate way to do it, rather one of the approach to a given problem.&lt;/p&gt;

&lt;h1 id=&#34;the-problem&#34;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;It is stated in
here &lt;a href=&#34;https://www.hackerrank.com/challenges/xor-se&#34;&gt;XOR-Sequence&lt;/a&gt; that given a
sequence of array &amp;lsquo;A&amp;rsquo; of size N, whose contents are as follows.
Assumed array index is &amp;lsquo;i&amp;rsquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-math&#34;&gt;A[0] = 0
A[1] = 1 (A[0] ^ i, i = 1)
A[2] = 3 (A[1] ^ i, i = 2)
A[4] = 0 (A[2] ^ i, i = 3)
....
A[N] = &#39;&#39; (A[N-1] ^ i, i = N)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given values &amp;rsquo;S&amp;rsquo; and &amp;lsquo;E&amp;rsquo;, for Start and End respectively, find out&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-math&#34;&gt;A[S] ^ A[S+1] ^ A[S+2] ^ .... ^ A[E-1] ^ A[E]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;let-the-computer-do-the-work&#34;&gt;Let the computer do the work&lt;/h1&gt;

&lt;p&gt;In order to know what the sequence look like, I wrote a simple program, which
generates given sequence to a known number. Say for eg 6, it will generate sequence upto i=6&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main
import (&amp;quot;fmt&amp;quot;)
func main() {
	var n, lastXOR uint64
	fmt.Scanf(&amp;quot;%d&amp;quot;, &amp;amp;n);
	for i:=uint64(0) ; i &amp;lt; n; i++ {
		fmt.Printf(&amp;quot;%2d, &amp;quot;, lastXOR^i)
		lastXOR ^= i
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please note this program may run for longer time if larger integers are given,
but we get the essence of it just by running it for smaller number like &lt;code&gt;&amp;lt; 100&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo 28 | go run xorgen.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voila ..&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt; 0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24, 25, 26, 27  28
 0,  1,  3,  0,  4,  1,  7,  0,  8,  1, 11,  0, 12,  1, 15,  0, 16,  1, 19,  0, 20,  1, 23,  0, 24,  1, 27,  0, 28
 ^               ^               ^               ^               ^               ^               ^               ^
 |               |               |               |               |               |               |               |

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;first-implementation&#34;&gt;First Implementation&lt;/h1&gt;

&lt;p&gt;Of course, my first implementation failed miserably with large input sequence.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func getXOR(start, end int) int {
    var lastXOR int
    for ; start &amp;lt; end; start++ {
        lastXOR ^= start
    }
    return lastXOR
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For most of the test cases it didn&amp;rsquo;t even computed results to full extent, on my
laptop it ran for 2 hours for an input sequence. Online system times out with a
compute-intensive operation like above.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;19
269656199  494630864
130226563  341217047
731964916  832420216
542340130  797666540
23301452   870008140
380088525  890526489
187177803  354216263
615371739  904830084
37808192   762275257
269603062  408398609
15763251   94286582
602143487  683191883
524044437  648225039
10725691   939564919
415709950  439717791
29711842   652998599
81933645   201678107
254074327  383133442
5665651    179364774
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like there is definitely something we can do so that it is computed with &lt;code&gt;O(1)&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;xor-patterns&#34;&gt;XOR patterns&lt;/h1&gt;

&lt;p&gt;We have all learnt at one time or the other in our lives about Bitwise XOR operation&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;OP1&lt;/th&gt;
&lt;th&gt;OP2&lt;/th&gt;
&lt;th&gt;XOR&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Also we see a repeated pattern, if (i MOD 4) result of all the XOR operation is
equal to &amp;lsquo;i&amp;rsquo;, Just to remind, &amp;lsquo;i&amp;rsquo; is the index of array
In other words, at i,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;when (i MOD 4 == 0), A[i] == i
when (i MOD 4 == 1), A[i] == 1
when (i MOD 4 == 2), A[i] == i + 1
when (i MOD 4 == 3), A[i] == 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also when &lt;code&gt;i MOD 4 == 0&lt;/code&gt;, and&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-math&#34;&gt;i ^ i+1 ^ i+2 ^ i+3 = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given the above pattern, we can split the entire sequence into 4 integers
sequence, starting at first multiple of 4 after &lt;code&gt;start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We know that,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-math&#34;&gt;a ^ 0 = a
a ^ a = 0
a ^ b ^ c = (a ^ b) ^ c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, if &lt;code&gt;start=29&lt;/code&gt; and &lt;code&gt;end = 82&lt;/code&gt; we can split the entire sequence
leaving out &lt;code&gt;29-31&lt;/code&gt;, and &lt;code&gt;80-82&lt;/code&gt; as they do not make up to the &lt;code&gt;4th&lt;/code&gt; number
slot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;32-35   -- A1
36-39   -- A2
40-43   -- A3 
44-47   -- A4
...
76-79   -- A9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hence we can write the sequence as (again leaving out &lt;code&gt;29-31&lt;/code&gt; and &lt;code&gt;80-82&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;A1 ^ A2 ^ A3 ^ A4 ^...^ A9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;we can check that, each slot (&lt;code&gt;A1&lt;/code&gt;, &lt;code&gt;A2&lt;/code&gt; &amp;hellip;  here, XOR upto &lt;code&gt;2&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;32 ^ 33 ^ 34 ^ 35 = 2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And we know that each of &lt;code&gt;Ax&lt;/code&gt;is &lt;code&gt;2&lt;/code&gt; from above.&lt;/p&gt;

&lt;p&gt;All we have to calculate is &lt;code&gt;A1 ^...^ A9&lt;/code&gt; is &lt;strong&gt;odd&lt;/strong&gt; or &lt;strong&gt;even&lt;/strong&gt; number of slots.
Because, if we have odd number the result of &lt;code&gt;A1 ^ A2 ^ .... ^ (2*An + 1)&lt;/code&gt; is
&lt;code&gt;2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally if there are even number of slots, it results to &lt;code&gt;0&lt;/code&gt; as &lt;code&gt;A1=2&lt;/code&gt; and &lt;code&gt;A2=2&lt;/code&gt;
&lt;code&gt;A1 ^ A2 = 0&lt;/code&gt; every send term cancels the one before it.&lt;/p&gt;

&lt;p&gt;In our example, we just have to calculate &lt;code&gt;A[29] ^ A[30] ^ A[31]&lt;/code&gt; and &lt;code&gt;A[80] ^
A[81] ^ A[82]&lt;/code&gt;, each of the elements have fixed values from our very first
program which implements crude way of XOR&amp;rsquo;ing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A[28] = 28
A[29] = 1      &amp;lt;--+
A[30] = 31        |- XOR
A[31] = 0      &amp;lt;--+ 
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;analysis&#34;&gt;Analysis&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;O(1)&lt;/code&gt; means the code runs in constant time. In our above example, we see if we
isolate the first and last slots, the in-between slots only contribute as &lt;code&gt;0&lt;/code&gt; or
&lt;code&gt;2&lt;/code&gt; depending on if number slots are &lt;strong&gt;&lt;em&gt;even&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;odd&lt;/em&gt;&lt;/strong&gt; respectively&lt;/p&gt;

&lt;h1 id=&#34;the-code&#34;&gt;The Code&lt;/h1&gt;

&lt;p&gt;Following code gets the last slot XORed&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func getLastXOR(start uint64) uint64 {
	var lastXOR uint64 = 0
	idx := start % 4
	switch idx {
	case 3:
		lastXOR = 2
	case 2:
		lastXOR ^= (start + 1)
		start--
		fallthrough
	case 1:
		lastXOR ^= 1
		start--
		fallthrough
	case 0:
		lastXOR ^= start
	}
	return lastXOR
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one calculates the first slot&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func getNextXOR(start uint64) uint64 {
	var nextXOR uint64
	idx := start % 4
	switch idx {
	case 0:
		nextXOR = 2
		start++
	case 1:
		nextXOR ^= 1
		start++
		fallthrough
	case 2:
		nextXOR ^= start + 1
		start++
		fallthrough
	case 3:
		nextXOR ^= 2
	}

	return nextXOR
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one calculates the number of slots if odd or even and adjust the &lt;code&gt;start&lt;/code&gt; to
next available multiple of &lt;code&gt;4&lt;/code&gt;. As well as adjust the &lt;code&gt;end&lt;/code&gt; to previous availble multiple of &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func calculate(start, end uint64) uint64 {
	newstart := start
	if start%4 != 0 {
		newstart = start + 4 - start%4
	}
	newend := end - end%4
	diff := newend - newstart
	div := diff / 4 % 2
	if div != 0 { // even slots
		return getNextXOR(start) ^ getLastXOR(end)
	}
	// odd number of slots
	return getNextXOR(start) ^ getLastXOR(end) ^ 2
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;=== OVER AND OUT ===&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>resume</title>
      <link>https://pmallappa.github.io/resume/</link>
      <pubDate>Thu, 01 Dec 2016 23:05:23 +0530</pubDate>
      
      <guid>https://pmallappa.github.io/resume/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Services</title>
      <link>https://pmallappa.github.io/services/</link>
      <pubDate>Thu, 01 Dec 2016 22:50:52 +0530</pubDate>
      
      <guid>https://pmallappa.github.io/services/</guid>
      <description>

&lt;style&gt;
.h1{
  font-size: 210%;
  font-variant: bold;
}
h2 {
  font-size: 180%;
}
h3 {
  font-size: 140%;
  text-decoration: underline;
}
h4 {
  font-size: 110%;
  font-variant: bold;
}
&lt;/style&gt;

&lt;p&gt;I offer consultation to startups and established corporations. I would like to
work as an independent contractor for a particlar task. I have close to 15 years
of experience in &lt;strong&gt;Embedded Systems&lt;/strong&gt;, &lt;strong&gt;ARM&lt;/strong&gt;, &lt;strong&gt;ARM64&lt;/strong&gt; &lt;strong&gt;PowerPC&lt;/strong&gt; and &lt;strong&gt;MIPS&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;consulting&#34;&gt;Consulting&lt;/h1&gt;

&lt;h2 id=&#34;embedded-system-design-and-development&#34;&gt;Embedded system design and development.&lt;/h2&gt;

&lt;h2 id=&#34;platform-bsp-design-and-development&#34;&gt;Platform/BSP design and development.&lt;/h2&gt;

&lt;h2 id=&#34;hardware-software-interface&#34;&gt;Hardware Software interface.&lt;/h2&gt;

&lt;h1 id=&#34;training&#34;&gt;Training&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#arm&#34;&gt;ARM&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#arm-v7-introduction&#34;&gt;ARM v7 Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#arm-v7-advanced-architecture&#34;&gt;ARM v7 Architecture &amp;amp; Advanced Concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#arm-v8-advanced&#34;&gt;ARM v8 Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linux&#34;&gt;Linux&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#linux-basics-and-programming&#34;&gt;Linux Basics &amp;amp; Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#advanced-linux-programming&#34;&gt;Advanced Linux Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kernel-programming-and-driver-framework&#34;&gt;Kernel Programming &amp;amp; Driver Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kernel-internals&#34;&gt;Kernel Internals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#miscallaneous&#34;&gt;Miscallaneous&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#python-programming&#34;&gt;Python Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#advanced-c-programming&#34;&gt;Advanced C Programming&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;arm&#34;&gt;ARM&lt;/h2&gt;

&lt;p&gt;I offer state-of-the-art &lt;strong&gt;ARM&lt;/strong&gt; training, hands-on and workshop based at client&amp;rsquo;s locations
Thare are introductory training and can be done in &lt;em&gt;1&lt;/em&gt;, &lt;em&gt;2&lt;/em&gt; or &lt;em&gt;3&lt;/em&gt; day material. Depending on individual needs, the duration and content can be customized&lt;/p&gt;

&lt;h3 id=&#34;arm-v7-introduction&#34;&gt;ARM v7 Introduction&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Introduction to ARM, ARM as a company&lt;/li&gt;
&lt;li&gt;ARM History, background and naming convention&lt;/li&gt;
&lt;li&gt;ARM Registers set&lt;/li&gt;
&lt;li&gt;ARM Instructions

&lt;ul&gt;
&lt;li&gt;Data movment&lt;/li&gt;
&lt;li&gt;Branching&lt;/li&gt;
&lt;li&gt;Load Store&lt;/li&gt;
&lt;li&gt;Miscallaneous&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Programming in Assembly&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;arm-v7-advanced-architecture&#34;&gt;ARM v7 Advanced Architecture&lt;/h3&gt;

&lt;p&gt;In this module we will discuss the advanced concepts such as &lt;code&gt;virtualization&lt;/code&gt; ,  &lt;code&gt;memory management&lt;/code&gt; and &lt;code&gt;GICv3&lt;/code&gt; interrupt handling.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exception Handling&lt;/li&gt;
&lt;li&gt;Operating Modes&lt;/li&gt;
&lt;li&gt;Switching between Modes&lt;/li&gt;
&lt;li&gt;Operating system Concepts&lt;/li&gt;
&lt;li&gt;Cache and Cache operation&lt;/li&gt;
&lt;li&gt;System Control Co-processor&lt;/li&gt;
&lt;li&gt;MMU Unit&lt;/li&gt;
&lt;li&gt;Cache configuration, locking, invalidating and flushing&lt;/li&gt;
&lt;li&gt;Booting up a v7 machine&lt;/li&gt;
&lt;li&gt;V7 Virtualization enhancements&lt;/li&gt;
&lt;li&gt;GICv3 Interrupt Handling&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;arm-v8-advanced-architecture&#34;&gt;ARM v8 Advanced Architecture&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;

&lt;h3 id=&#34;linux-basics-and-programming&#34;&gt;Linux Basics and Programming&lt;/h3&gt;

&lt;h4 id=&#34;introduction-to-linux&#34;&gt;Introduction to Linux&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Terminal and Shell&lt;/li&gt;
&lt;li&gt;Command line&lt;/li&gt;
&lt;li&gt;How your programs startup&lt;/li&gt;
&lt;li&gt;Linux Filesystem&lt;/li&gt;
&lt;li&gt;Shell scripting basics&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;advanced-linux-programming&#34;&gt;Advanced Linux Programming&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Process and process control&lt;/li&gt;
&lt;li&gt;File Management&lt;/li&gt;
&lt;li&gt;Memory Management

&lt;ul&gt;
&lt;li&gt;MMAP, accessing hardware in userspace&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Synchronization&lt;/li&gt;
&lt;li&gt;IPC (Inter-Process Communication)&lt;/li&gt;
&lt;li&gt;Compiling and debugging programs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;kernel-programming-and-driver-framework&#34;&gt;Kernel Programming and Driver framework&lt;/h3&gt;

&lt;p&gt;Kernel Programming introduction and Introduction to device driver framework&lt;/p&gt;

&lt;h5 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#linux-basics-and-programming&#34;&gt;Linux Basics &amp;amp; Programming&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#advanced-linux-programming&#34;&gt;Advanced Linux Programming&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kernel Module Vs Application Namespace,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Basic Kernel Services,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linux Kernel Code, Kernel Hello world,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Loading/Unloading Modules,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linux Kernel Tree,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linux Source Code,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linux Kernel Configuration.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Writing a Simple Device Driver&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Insert/Remove driver&lt;/li&gt;
&lt;li&gt;Driver framework&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kernel synchronization Machanisms&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Race condition&lt;/li&gt;
&lt;li&gt;Semaphore/mutex usage&lt;/li&gt;
&lt;li&gt;Deadlock and prevention&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Interrupt handling and tasklets&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wait queues and Kernel threads&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;kernel-internals&#34;&gt;Kernel Internals&lt;/h3&gt;

&lt;p&gt;This course is not for the faint hearted, this introduces to Linux kernel and its development of 25 years. Its also not recommended for the device driver enthusiasts as it deals with core kernel components.&lt;/p&gt;

&lt;h4 id=&#34;prerequisites-1&#34;&gt;Prerequisites&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#linux-basics-and-programming&#34;&gt;Linux Basics &amp;amp; Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#advanced-linux-programming&#34;&gt;Advanced Linux Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kernel-programming-and-driver-framework&#34;&gt;Kernel Programming &amp;amp; Driver Framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;contents&#34;&gt;Contents&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Process and Its representation on Kernel

&lt;ul&gt;
&lt;li&gt;task, struct and clone(), fork(), vfork()&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Kernel Synchronization

&lt;ul&gt;
&lt;li&gt;Per CPU variables&lt;/li&gt;
&lt;li&gt;atomic operation, variables, spinlocks, rw-locks&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Kernel data-structures

&lt;ul&gt;
&lt;li&gt;Trees, rb-tree, lists etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Timing measurement in Linux

&lt;ul&gt;
&lt;li&gt;How kernel keeps track of time&lt;/li&gt;
&lt;li&gt;tickless, hr-timer and jiffies etc..&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Memory management

&lt;ul&gt;
&lt;li&gt;pagefaults and slab,slub,slob allocators&lt;/li&gt;
&lt;li&gt;page allocation and reclaimation&lt;/li&gt;
&lt;li&gt;page overcommiting, CMA (continous memory allocator)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Linux virtual filesystem&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;miscallaneous&#34;&gt;Miscallaneous&lt;/h2&gt;

&lt;h3 id=&#34;python-programming&#34;&gt;Python Programming&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Python programming concepts&lt;/li&gt;
&lt;li&gt;Introduction to IDLE and command line based python applications&lt;/li&gt;
&lt;li&gt;Syntax and writing Hello World&lt;/li&gt;
&lt;li&gt;Introduction to functional programming&lt;/li&gt;
&lt;li&gt;Writing small programs&lt;/li&gt;
&lt;li&gt;importing other libraries&lt;/li&gt;
&lt;li&gt;Control structure

&lt;ul&gt;
&lt;li&gt;If, if-else, try-except, loops and iterators&lt;/li&gt;
&lt;li&gt;Iterators, Generators&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Advanced Concepts

&lt;ul&gt;
&lt;li&gt;Interfacing with C&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Object Oriented programming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Added Python development&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Django Web App development&lt;/li&gt;
&lt;li&gt;Python Web framework

&lt;ul&gt;
&lt;li&gt;routing&lt;/li&gt;
&lt;li&gt;templating&lt;/li&gt;
&lt;li&gt;data-managment&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;advanced-c-programming&#34;&gt;Advanced C Programming&lt;/h3&gt;

&lt;h4 id=&#34;prerequisites-2&#34;&gt;Prerequisites&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Basic C Programming&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;contents-1&#34;&gt;Contents&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Structure and representation&lt;/li&gt;
&lt;li&gt;Advanced usage of enums and error propagation&lt;/li&gt;
&lt;li&gt;Unix System programming&lt;/li&gt;
&lt;li&gt;IPC usage and examples programs&lt;/li&gt;
&lt;li&gt;Programming for 64-bit IA-32, IA-64 and ARM64, MIPS64

&lt;ul&gt;
&lt;li&gt;Things to take care of while programming for 64-bit architecture&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Pointers and pointer arithmetic

&lt;ul&gt;
&lt;li&gt;Invalid and dangling pointers&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Data-type and conversion rules&lt;/li&gt;
&lt;li&gt;Function pointer and usage&lt;/li&gt;
&lt;li&gt;Pre-processors, tricks, traps-and-pitfalls&lt;/li&gt;
&lt;li&gt;STDIO library&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>My first night with hugo</title>
      <link>https://pmallappa.github.io/blog/2016/11/30/my-first-night-with-hugo/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pmallappa.github.io/blog/2016/11/30/my-first-night-with-hugo/</guid>
      <description>

&lt;h2 id=&#34;what-happens-in-there&#34;&gt;What happens in there&lt;/h2&gt;

&lt;p&gt;Okay, Before it gets any weirder, &lt;a href=&#34;http://www.hugo.com&#34;&gt;&lt;strong&gt;Hugo&lt;/strong&gt;&lt;/a&gt; is a blogging
engine. Write a bunch of files in markdown syntax and &lt;strong&gt;Hugo&lt;/strong&gt; will render it
for you. When all is done, and you are &lt;em&gt;satisfied&lt;/em&gt;, it can be taken to next
step.&lt;/p&gt;

&lt;h2 id=&#34;where-to-begin&#34;&gt;Where to begin&lt;/h2&gt;

&lt;p&gt;In all the ocean of knowledge, an important question to ask is where the
&lt;strong&gt;Hell&lt;/strong&gt; I start ?&lt;/p&gt;

&lt;p&gt;There were so many blogging engines, With my initial encounter
with &lt;a href=&#34;http://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;, &lt;a href=&#34;http://www.octopress.org&#34;&gt;Octopress&lt;/a&gt; etc.,
I thought I may never start.&lt;/p&gt;

&lt;p&gt;To my surprise, &lt;a href=&#34;http://www.hugo.com&#34;&gt;&lt;em&gt;Hugo&lt;/em&gt;&lt;/a&gt; came to rescue. The reason I like
is its written in Go and is easy to modify (as I am learning Go language).&lt;/p&gt;

&lt;h2 id=&#34;never-thought-this-would-happen&#34;&gt;Never thought this would happen&lt;/h2&gt;

&lt;p&gt;It was a bliss and with a few command strokes my blog is up and running. Hugo
provides a builtin server that fires up a local server at &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt;
if you dont give any options.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server -ws .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This automatically updates your blogged page real-time to reflect your latest contents&lt;/p&gt;

&lt;h2 id=&#34;setting-up&#34;&gt;Setting up&lt;/h2&gt;

&lt;p&gt;Much of the information is presented in a better manner on hugo&amp;rsquo;s documents
Please refer that. We discuss setting up a github pages (static content). My
goal is to have a single repository that serves as fully deployed html files
from a &lt;code&gt;gh-pages&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;Another branch say &lt;code&gt;master&lt;/code&gt; saves all the static contents of this site.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-hugo&#34;&gt;Setting up hugo&lt;/h3&gt;

&lt;p&gt;As mentioned above, please refer Hugo&amp;rsquo;s documentation for this&lt;/p&gt;

&lt;h3 id=&#34;setting-up-your-site&#34;&gt;Setting up your site&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hugo new site &amp;lt;site&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &amp;lsquo;site&amp;rsquo; is the name of the site for your disposal.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-your-categories&#34;&gt;Setting up your categories&lt;/h3&gt;

&lt;p&gt;It is better to categorize contents that one will write on their pages.&lt;/p&gt;

&lt;h2 id=&#34;writing-your-first-blog&#34;&gt;Writing your first Blog&lt;/h2&gt;

&lt;h2 id=&#34;changing-your-home-page&#34;&gt;Changing your home page&lt;/h2&gt;

&lt;p&gt;My personal preference is to have a separate home page which doens&amp;rsquo;t right away
thow the blog/ in the visitors face. Hence I designed in pure HTML what looks
like an home page at &lt;a href=&#34;http://pmallappa.github.io&#34;&gt;PREM Mallappa&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Novice guide to Cryptography and Privacy</title>
      <link>https://pmallappa.github.io/articles/2016/11/29/Cryptography-101/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pmallappa.github.io/articles/2016/11/29/Cryptography-101/</guid>
      <description>

&lt;h1 id=&#34;secrets&#34;&gt;Secrets&lt;/h1&gt;

&lt;p&gt;Hiding information from intruders was used as tactics from dawn of civilization.
Earlier days of humanity more and more of the Kings and Queens have used lame
form of encryption just to hide their information from the carriers and other
traitors.&lt;/p&gt;

&lt;p&gt;Given the internet and pretty much anyone with an access can look into your
information; it has evidently became important &lt;em&gt;privacy&lt;/em&gt; is the at most
important thing on the Internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alice&lt;/strong&gt; and &lt;strong&gt;Bob&lt;/strong&gt; invented cryptography, &lt;strong&gt;Just KIDDING&lt;/strong&gt; all most all the
texts, presentations, blogs and articles talk about these two people wanting to
exchange some secret messages. To have local touch we take names of mythical
creations of &lt;strong&gt;Rama&lt;/strong&gt; and &lt;strong&gt;seeta&lt;/strong&gt;, I am not going to say anything different,
but present to you with things that I have understood.&lt;/p&gt;

&lt;p&gt;Everyone has secrets, so does &lt;strong&gt;Rama&lt;/strong&gt; and &lt;strong&gt;Seeta&lt;/strong&gt;. How do the communicate
with each other via written media, even if someone get their hands on the secret
message.&lt;/p&gt;

&lt;h1 id=&#34;computer-security&#34;&gt;Computer Security&lt;/h1&gt;

&lt;p&gt;Computer security in this article vastly refers to the various levels and
dimensions of all the security involved online. To elaborate, Securing the
physical computer to login password to encrypted disk, encrypted driver,
encrypted folder, encrypted file to encrypted email. In this short-book we
concentrate on the encrypted email part.&lt;/p&gt;

&lt;h1 id=&#34;e-mail-security&#34;&gt;E-mail security.&lt;/h1&gt;

&lt;p&gt;E-mail as it stands today was invented in sixties, at the time the network is
limited to a single organization (usually defence) and no one else would have
access to this network as a person has to have physical access.&lt;/p&gt;

&lt;p&gt;Once the small network started to grow (what is today commonly refered to as the
&lt;strong&gt;Internet&lt;/strong&gt; (with a I)), people started to realize the e-mail is often sent on
the network as a clear text message. Anyone who can tap into the physical
network could see the email sent from one person to another.&lt;/p&gt;

&lt;p&gt;This is a obvious security concern, and what lead to the inventions of keys.
Using these keys the &lt;em&gt;cleartext&lt;/em&gt; is converted into &lt;em&gt;ciphertext&lt;/em&gt;. The ciphertext
is not guaranteed to have same lenght of the original message.&lt;/p&gt;

&lt;p&gt;This process of converting from cleartext to ciphertext is known as
&lt;strong&gt;encryption&lt;/strong&gt;. The process of converting back from ciphertext to cleartext is
known as &lt;strong&gt;decryption&lt;/strong&gt;. There are two types of keys in use&lt;/p&gt;

&lt;h3 id=&#34;symmetric-keys&#34;&gt;Symmetric keys&lt;/h3&gt;

&lt;p&gt;Same key is used to encrypt and decrypt messages. The problem with this kind of
encryption is that, if a person &lt;strong&gt;A&lt;/strong&gt; gets hold of key belonging to &lt;strong&gt;B&lt;/strong&gt;, which &lt;strong&gt;B&lt;/strong&gt;
is not intended to. &lt;strong&gt;A&lt;/strong&gt; can decrypt all the messages that were sent to &lt;strong&gt;B&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;asymmetric-keys&#34;&gt;Asymmetric keys&lt;/h3&gt;

&lt;p&gt;A pair of keys are used, commonly refered to as &lt;strong&gt;private&lt;/strong&gt; key and &lt;strong&gt;public&lt;/strong&gt; key.
A &lt;em&gt;public key&lt;/em&gt; is available to public and anyone can use this key to send email
to a person to whom this key belongs. And the receiving party uses his/her
&lt;em&gt;private key&lt;/em&gt; to decrypt the message.&lt;/p&gt;

&lt;h2 id=&#34;sample-graph&#34;&gt;Sample graph&lt;/h2&gt;

&lt;h1 id=&#34;pgp-pretty-good-privacy&#34;&gt;PGP - Pretty Good Privacy&lt;/h1&gt;

&lt;p&gt;It became evidently clear from the beginning that &lt;em&gt;symmetric&lt;/em&gt; encryption would
not offer a better infrastructure in terms of security. All the concentration
was directed to &lt;em&gt;asymmetric&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;birth-of-pgp&#34;&gt;Birth of PGP&lt;/h2&gt;

&lt;h2 id=&#34;terminologies&#34;&gt;Terminologies&lt;/h2&gt;

&lt;h3 id=&#34;confidentiality&#34;&gt;Confidentiality&lt;/h3&gt;

&lt;p&gt;The way asymmetric encryption is used in maintaining confidentiality (i.e. the
privacy of your precious documents) goes something like this: you generate a
‘keypair’ (a pair of keys such that documents encrypted with one can be
decrypted with the other, and vice versa). One of these is your public key, the
other is your private key. So, you share your public key with the world, and
keep your private key, well, private. People who want to send you an encrypted
e-mail find your public key, write the e-mail, encrypt it using the public key
and send it to you. You, on receiving the e-mail, whip out your private key,
decrypt the ciphertext and read it. This is how confidentiality is obtained with
OpenPGP, and it’s relatively simple.&lt;/p&gt;

&lt;p&gt;In actual fact, it doesn’t quite work like this. As it happens, and quite
unfortunately so, asymmetric encryption has a few drawbacks. It is quite
computationally intensive, and some algorithms can produce ciphertext up to
twice the size of the original text. For these reasons, a technique known as
hybrid encryption is employed. Rather than just encrypting a document with your
public key, a unique, random session key is generated for that document. This is
also sometimes referred to as a nonce (number used once). The session key needs
to be completely random, essentially ‘unguessable’; this is why having a good
source of randomness (a.k.a. entropy) is very important in system security.&lt;/p&gt;

&lt;p&gt;The document is encrypted symmetrically with that session key, and then the
session key is encrypted with your public key. This will probably be much
shorter than the document itself, so the computational load of asymmetric
encryption is lightened significantly. The encrypted session key is attached to
the symmetrically-encrypted document, and the session key discarded forever.
Upon receiving the encrypted document, you use your private key to decrypt the
session key, and then use the session key to decrypt the entire document.&lt;/p&gt;

&lt;h3 id=&#34;authenticity&#34;&gt;Authenticity&lt;/h3&gt;

&lt;p&gt;One of the other uses of asymmetric encryption is for verifying the authenticity
of data. For example, how do I know that this e-mail was actually sent to me
from Joe Bloggs and not some impostor? We can take advantage of the fact that,
if one key can decrypt a piece of ciphertext, the other key must necessarily
have encrypted it. First, the sender will take the e-mail and construct a hash
using a cryptographic hash function. This function must have several properties:&lt;/p&gt;

&lt;p&gt;It should be impractical to find two distinct messages with the same hash. It
should be impractical to obtain the original message given a hash (a CHF is a
one-way function). It should be easy to compute the hash value for any given
message. The sender then takes that hash and his/her own secret key, and encrypt
the hash with the secret key. This encrypted hash, known as the signature, is
bundled along with the message when it is sent. The recipient can then take the
signature, the original message, and the sender’s public key, and attempt to
decrypt the signature using the public key. The recipient will hash the message
themselves, and compare the decrypted signature to the hash of the message. If
equal, the recipient can know for certain that the message was created by
someone with a certain private key (without knowing the key themselves). This is
how authenticity is obtained using OpenPGP.&lt;/p&gt;

&lt;p&gt;It also helps to enforce data integrity, since the hash check will fail if the
document has been changed in transit, so either data corruption or malicious
intent will be detected.&lt;/p&gt;

&lt;p&gt;This is usually used in tandem with encryption, providing confidentiality and
integrity, but it’s also pretty useful for things like software releases, where
the maintainer will sign the release file with his/her private key. You’ll
download the release file and the corresponding .sig or .asc file, and verify
that the package was downloaded intact and that it was published by the bona
fide maintainer.&lt;/p&gt;

&lt;h3 id=&#34;keyservers&#34;&gt;Keyservers&lt;/h3&gt;

&lt;p&gt;Obviously, if you have your public/private keypair, you’ll want to somehow
publish the public key somewhere where everyone can access it. Keyservers are a
relatively simple way to do so. A keyserver is literally just a repository of
public keys; I’ll show you later how to push to and fetch from a keyserver,
since this is an important way of keeping your keyring (i.e. the public keys of
others you have saved locally) up-to-date, and also keeping others’ keyrings
up-to-date (such as when you make a change to your key).&lt;/p&gt;

&lt;p&gt;WEB OF TRUST
One of the most important concepts in OpenPGP is that of a Web of
Trust. Let’s say Alice decides to generate a keypair using your identity (name
and e-mail address). How are people to decide which belongs to who? Not only
might someone send you e-mail encrypted for Alice, rendering you unable to read
it, but Alice could also read that e-mail, constituting a major breach of
security (not to mention a serious inconvenience). Alice could also sign
documents, tricking recipients into thinking that you created them.&lt;/p&gt;

&lt;p&gt;Fortunately, using the concept of signing as detailed above, you can sign a
public key, as if to say ‘I trust this key—owner relationship’. The more keys
sign that key, the more that key becomes ‘trusted’. Eventually, you will have
what is known as a ‘Web of Trust’; where key A is signed by key B and C, key B
is signed by keys A and D, and key C is signed by keys A, B and D, for example.
The set of keys and signatures makes up the Web of Trust. You can determine
whether an identity is to be trusted or not by following the chain of trusted
friends. This way, anyone trying to pose as a user will not be able to get much
trust; you’ll always go with the key that works out as most trusted.&lt;/p&gt;

&lt;p&gt;I’ll give an example. Let’s say you and Bob are best friends. You trust him
completely, so you’ve signed his key. Bob has a friend called Chris, who he
trusts completely, so he has signed his key. If Chris sends you a signed e-mail,
you’re very likely to believe that signature indeed belongs to Chris, because
the authenticity of the key with which it is signed has itself been attested to
by your best friend Bob (and you can verify that by checking Bob’s signature
against his public key). It can get confusing for even relatively small
networks, but fortunately a simple computer algorithm can calculate a ‘trust
level’ for a given signature, based on following the sequence of connections of
trust linking you to that signature.&lt;/p&gt;

&lt;p&gt;You might also be happy to know that OpenPGP is a good reason to have a party.
At key-signing parties, groups of people get together and exchange their key
fingerprints (since each OpenPGP key has a unique identifier); the morning
after, everyone goes online and signs the keys they accepted the night before.&lt;/p&gt;

&lt;h1 id=&#34;gpg-gnu-privacy-gaurd&#34;&gt;GPG - Gnu Privacy Gaurd&lt;/h1&gt;

&lt;h2 id=&#34;introduction-to-gpg&#34;&gt;Introduction to GPG&lt;/h2&gt;

&lt;p&gt;There are 3 main flavors of GnuPG:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.4 (AKA gpg) - Old - Super stable (11 years old) &amp;amp; limited features&lt;/li&gt;
&lt;li&gt;2.0 (AKA gpg2) - Stable - Most people use this for personal encryption&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It isrecommended by the GnuPG project version to use the Stable GPG-2 release
(2.0). I&amp;rsquo;ve also included instructions for GnuPG2.1 because I use it personally
and find the new features useful.&lt;/p&gt;

&lt;h2 id=&#34;terminologies-1&#34;&gt;Terminologies&lt;/h2&gt;

&lt;h3 id=&#34;passphrase&#34;&gt;Passphrase&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Password&lt;/em&gt; is a word, as the name indicates its an &amp;lsquo;elongated&amp;rsquo; password.
According to research, a phrase or a sentence makes it hard to crack a secret key.&lt;/p&gt;

&lt;h3 id=&#34;subkeys&#34;&gt;Subkeys&lt;/h3&gt;

&lt;p&gt;Subkeys are quite a subtle but powerful concept. The problem with the keypair is
this: what happens when a key is compromised? You’ll have to revoke your old
keypair (a process which involves you verifying that you are the owner of the
key, after which it will be marked as revoked), thus losing your entire Web of
Trust, and then re-generate a key and publish that. Clearly not a very good
situation to be in.&lt;/p&gt;

&lt;p&gt;OpenPGP uses a concept known as a subkey to mitigate this problem. Rather than
have a single keypair, you’ll have a ‘master’ keypair which acts as your
identity, and a ‘subkey’ pair which does the actual *cryption. If for some
reason a subkey pair becomes compromised (i.e. someone finds out your
passphrase), you can revoke just that subkey and create a new one, without
losing your identity or WoT.&lt;/p&gt;

&lt;p&gt;Types of Subkeys&lt;/p&gt;

&lt;h4 id=&#34;master-key&#34;&gt;Master Key&lt;/h4&gt;

&lt;h4 id=&#34;signing-key&#34;&gt;Signing Key&lt;/h4&gt;

&lt;h4 id=&#34;encryption-key&#34;&gt;Encryption Key&lt;/h4&gt;

&lt;h4 id=&#34;authentication-key&#34;&gt;Authentication Key&lt;/h4&gt;

&lt;h3 id=&#34;signing-the-key&#34;&gt;Signing the Key&lt;/h3&gt;

&lt;p&gt;This is about authorizing a key that its a trusted one. This is particularly
useful in WoT(Web of Trust)&lt;/p&gt;

&lt;h3 id=&#34;trusting-the-key&#34;&gt;Trusting the Key&lt;/h3&gt;

&lt;p&gt;Trust level indicates how to use a key to encrypt/decrypt&lt;/p&gt;

&lt;h1 id=&#34;configuring-your-own-setup&#34;&gt;Configuring your own setup&lt;/h1&gt;

&lt;p&gt;I recommend that, GnuPG2.1 to be used for all the operation unless there is
physically impossible to get hold of this verison&lt;/p&gt;

&lt;h2 id=&#34;preliminary&#34;&gt;Preliminary&lt;/h2&gt;

&lt;p&gt;Before we dive into the details of GNUPG and possibly corrupt your existing
installation, we create a separate directory for our current installation, and
you can overwrite your configuration if necessary create a new directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;umask 077
echo $SHELL
export GNUPGHOME=/tmp/book/gnupg
mkdir -p ${GNUPGHOME}

# Now setup all the variables
export username=&#39;FooFirst BarLast&#39;
export userid=foo
export useremail=&#39;foo@bar.com&#39;
export algo=8  # this belongs to RSA with custom capabilities
export keylen=4000
export passphrase=&#39;FooIsBar&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;list-all-secret-keys&#34;&gt;List all Secret Keys&lt;/h2&gt;

&lt;p&gt;There should be none to start with, so below command may just print version
and exit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --list-secret-keys
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;list-all-public-keys&#34;&gt;List All Public keys&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;gpg --list-public-keys
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;generate-a-secret-public-key-pair&#34;&gt;Generate a Secret-Public key-pair&lt;/h2&gt;

&lt;p&gt;Key can be generated either by interactive approach or by using
batch mode file. A later case is discussed below,&lt;/p&gt;

&lt;h3 id=&#34;batch-mode&#34;&gt;batch mode&lt;/h3&gt;

&lt;p&gt;create a file &lt;span class=&#34;underline&#34;&gt;pgp_batch.txt&lt;/span&gt;
with following details&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo %echo Generating a basic OpenPGP key
Key-Type      : RSA
Key-Length    : 4000
Subkey-Type   : ELG-E
Subkey-Length : 2528
Name-Real     : FooFirst BarLast
Name-Comment  : The Hoe
Name-Email    : joe@foobar.com
Expire-Date   : 0
Passphrase    : Joes passphrase is easy
%pubring foo.pub
%secring foo.sec
# Do a commit here, so that we can later print &amp;quot;done&amp;quot; :-)
%commit
%echo done
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;to-generate-key-interactively-use-the-following&#34;&gt;To generate key interactively use the following&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --full-gen-key
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;generate-sub-keys&#34;&gt;Generate Sub-keys&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;gpg --list-keys

export mykeyid=`gpg --list-sigs | awk &#39;/sig/ {print $2}&#39; | tail -1`
echo $mykeyid

echo $mykeyid

0x95DC1AC8BB0C0132
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;and-signing-key&#34;&gt;and Signing  key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;echo -e &amp;quot;addkey\n8\nE\nQ\n2048\n10y\nsave\n&amp;quot; | \
    gpg2 --expert --passphrase &amp;quot;FooIsBar&amp;quot; \
         --command-fd 0 --pinentry-mode loopback \
         --yes --edit-key 0x95DC1AC8BB0C0132
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-an-encryption-key&#34;&gt;Create an Encryption key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;echo -e &amp;quot;addkey\n8\nS\nQ\n2048\n10y\nsave\n&amp;quot; | \
    gpg2 --expert --passphrase &amp;quot;FooIsBar&amp;quot; --command-fd 0 \
         --pinentry-mode loopback \
         --yes --edit-key 0x95DC1AC8BB0C0132
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-an-authentication-key&#34;&gt;Create an Authentication Key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;echo -e &amp;quot;addkey\n8\nS\nE\nA\nQ\n2048\n10y\nsave\n&amp;quot; | \
    gpg2 --expert --passphrase &amp;quot;FooIsBar&amp;quot; --command-fd 0 \
         --pinentry-mode loopback \
         --yes --edit-key 0x95DC1AC8BB0C0132
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;verify&#34;&gt;Verify&lt;/h3&gt;

&lt;p&gt;Finally verify using &lt;em&gt;-&amp;amp;#x00ad;list-keys&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg --list-keys

/tmp/book/gnupg/pubring.kbx
---------------------------
pub   rsa4000/0x95DC1AC8BB0C0132 2016-07-06 [C] [expires: 2026-07-04]
      Key fingerprint = EC02 6C19 09D1 8382 692B  C67A 95DC 1AC8 BB0C 0132
sub   rsa2048/0x480097ADB8D11747 2016-07-06 [A] [expires: 2026-07-04]
sub   rsa2048/0xD250AFC4FA53A8C4 2016-07-06 [E] [expires: 2026-07-04]
sub   rsa2048/0xE866BCB7F357DA42 2016-07-06 [S] [expires: 2026-07-04]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-gpg-config&#34;&gt;Create GPG Config&lt;/h2&gt;

&lt;p&gt;Now its time to create the &lt;span class=&#34;underline&#34;&gt;gpg.conf&lt;/span&gt;. Users are encouraged to blindly copy
paste the following. Understanding this in detail would take its own time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;gt; ${GNUPGHOME}/gpg.conf &amp;lt;&amp;lt;EOF
no-emit-version
no-comments
keyid-format 0xlong
with-fingerprint
list-options show-uid-validity
verify-options show-uid-validity
use-agent
keyserver hkps://hkps.pool.sks-keyservers.net
# or less secure: keyserver hkp://pool.sks-keyservers.net
keyserver-options no-honor-keyserver-url
keyserver-options include-revoked
personal-cipher-preferences AES256 AES192 AES CAST5
personal-digest-preferences SHA512 SHA384 SHA256 SHA224
cert-digest-algo SHA512
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;testing-your-setup&#34;&gt;Testing your setup&lt;/h2&gt;

&lt;h3 id=&#34;test-signing&#34;&gt;Test Signing&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;hello&#39;    | \
gpg2 --armor --clearsign -r foo -q \
--passphrase &amp;quot;FooIsBar&amp;quot; --pinentry-mode loopback | \
gpg2 --verify -q
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gpg: Signature made Thu 07 Jul 2016 01:17:56 AM IST
gpg:                using RSA key 0xE866BCB7F357DA42
gpg: Good signature from &amp;ldquo;FooFirst BarLast &lt;a href=&#34;mailto:foo@bar.com&#34;&gt;foo@bar.com&lt;/a&gt;&amp;rdquo; [ultimate]
Primary key fingerprint: EC02 6C19 09D1 8382 692B  C67A 95DC 1AC8 BB0C 0132
     Subkey fingerprint: BCD4 8411 1DA5 AE45 AED9  78AE E866 BCB7 F357 DA42&lt;/p&gt;

&lt;h3 id=&#34;test-encrypt-decrypt&#34;&gt;Test encrypt/decrypt&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;sekrats!&#39; | \
gpg2 --armor --encrypt -r foo --passphrase &#39;FooIsBar&#39; | \
gpg2 --decrypt --passphrase &#39;FooIsBar&#39; -q

&amp;gt; sekrats!
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;miscalaneous-topics&#34;&gt;Miscalaneous Topics&lt;/h1&gt;

&lt;h2 id=&#34;creating-revoke-keys&#34;&gt;Creating Revoke keys&lt;/h2&gt;

&lt;h3 id=&#34;generate-a-revokation-key-for-both-keys&#34;&gt;Generate a revokation key for both keys&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --out revoke-728716EC.asc --gen-revoke 728716EC
#
gpg --full-gen-key
#
gpg --out revoke-DE1CB2BF.asc --gen-revoke DE1CB2BF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;see-how-many-keys-are-there&#34;&gt;See how many keys are there&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gpg --list-keys
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-photo-to-your-pgp-key&#34;&gt;Adding Photo to your PGP key&lt;/h2&gt;

&lt;h2 id=&#34;generating-ssh-keys-using-pgp-key&#34;&gt;Generating SSH keys using PGP key&lt;/h2&gt;

&lt;p&gt;Enable SSH support in GnuPG Agent by adding the corresponding option in the
agent configuration file &lt;span class=&#34;underline&#34;&gt;~/.gnupg/gpg-agent.conf&lt;/span&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enable-ssh-support
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While GnuPG programs can start the GnuPG Agent on demand, starting explicitly
the agent is necessary to ensure that the agent is running when a SSH client
needs it. The two lines below, to be inserted into a ~/.xprofile script, are
sufficient: gpg-connect-agent /bye&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export SSH_AUTH_SOCK=$HOME/.gnupg/S.gpg-agent.ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the GPG agent running, you can start using it with your existing SSH keys,
exactly like you would use ssh-agent. For example, to load your default
~/.ssh/id_rsa key into the agent, just run as usual: $ ssh-add Using an OpenPGP
key as a SSH key Create an authentication subkey Let’s assume you already have
an OpenPGP key such as the following (note the &amp;#x2013;expert flag, which will enable
advanced key generation options):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg2 --expert --edit-key alice

pub  rsa4096/CB2F38F25B491A54
     created: 2014-12-31  expires: 2017-12-30  usage: SC
     trust: ultimate      validity: ultimate
sub  rsa2048/04BB7F8FDEC5E5D9
     created: 2014-12-31  expires: 2015-12-31  usage: S
sub  rsa2048/BBB6B86627C2D43A
     created: 2014-12-31  expires: 2015-12-31  usage: E
[ultimate] (1). Alice &amp;lt;alice@example.org&amp;gt;
This is a 4096-bit master key with a 2048-bit subkey for encryption and a 2048-bit subkey for signing. We will add a new 2048-bit subkey for authentication purposes:
gpg&amp;gt; addkey
Please select what kind of key you want:
   (3) DSA (sign only)
   (4) RSA (sign only)
   (5) Elgamal (encrypt only)
   (6) RSA (encrypt only)
   (7) DSA (set your own capabilities)
   (8) RSA (set your own capabilities)
  (10) ECC (sign only)
  (11) ECC (set your own capabilities)
  (12) ECC (encrypt only)
  (13) Existing key
Your selection?
Select (8) RSA (set your own capabilities):
Possible actions for a RSA key: Sign Encrypt Authenticate
Current allowed actions: Sign Encrypt

   (S) Toggle the sign capability
   (E) Toggle the encrypt capability
   (A) Toggle the authenticate capability
   (Q) Finished

Your selection?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Select successively (S), (E), and (A) to remove the signing and encryption
capabilities and enable the authentication capability.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Possible actions for a RSA key: Sign Encrypt Authenticate
Current allowed actions: Authenticate

   (S) Toggle the sign capability
   (E) Toggle the encrypt capability
   (A) Toggle the authenticate capability
   (Q) Finished

Your selection?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the only allowed action is Authenticate, select (Q) Finished to exit this
sub-menu. The remaining of the procedure is like any other key generation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048)
Requested keysize is 2048 bits
Please specify how long the key should be valid.
         0 = key does not expire
      &amp;lt;n&amp;gt;  = key expires in n days
      &amp;lt;n&amp;gt;w = key expires in n weeks
      &amp;lt;n&amp;gt;m = key expires in n months
      &amp;lt;n&amp;gt;y = key expires in n years
Key is valid for? (0) 1y
Key expires at Thu 31 Dec 2015 02:02:56 PM CEST
Is this correct? (y/N) y
Really create? (y/N) y

We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.

pub  rsa4096/CB2F38F25B491A54
     created: 2014-12-31  expires: 2017-12-30  usage: SC
     trust: ultimate      validity: ultimate
sub  rsa2048/04BB7F8FDEC5E5D9
     created: 2014-12-31  expires: 2015-12-31  usage: S
sub  rsa2048/BBB6B86627C2D43A
     created: 2014-12-31  expires: 2015-12-31  usage: E
sub  rsa2048/7D2233B8833E70AF
     created: 2014-12-31  expires: 2015-12-31  usage: A
[ultimate] (1). Alice &amp;lt;alice@example.org&amp;gt;

gpg&amp;gt; save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the authentication subkey To tell the agent that the authentication subkey
can be used with SSH, extract the keygrip of that subkey:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg2 --with-keygrip -k alice
pub   rsa4096/CB2F38F25B491A54 2014-12-31 [SC] [expires: 2017-12-30]
      Keygrip = D4DF0C35D3E22FA6AC37DA2E54FB03F73616A3CB
uid               [ultimate] Alice &amp;lt;alice@example.org&amp;gt;
sub   rsa2048/04BB7F8FDEC5E5D9 2014-12-31 [S] [expires: 2015-12-31]
      Keygrip = 21B2EDF018D7CAF0B45644FDB753DD42307C4425
sub   rsa2048/BBB6B86627C2D43A 2014-12-31 [E] [expires: 2015-12-31]
      Keygrip = 2E149DA9C5E46E0DECC6A17EFD8B5FB1DF1E1BAB
sub   rsa2048/7D2233B8833E70AF 2014-12-31 [A] [expires: 2015-12-31]
      Keygrip = ECF4591CC28EC303BB12D1E866C8B8AFFB675C7D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As can be seen from last few lines the key marked with &lt;span class=&#34;underline&#34;&gt;[A]&lt;/span&gt; is the auth key
and write it into the &lt;span class=&#34;underline&#34;&gt;~/.gnupg/sshcontrol&lt;/span&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# List of allowed ssh keys.  Only keys present in this file are used
# in the SSH protocol.  The ssh-add tool may add new entries to this
[…]
ECF4591CC28EC303BB12D1E866C8B8AFFB675C7D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may then verify that the key is indeed available for SSH by querying the
agent for available identities:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-add -l
2048 e3:40:d5:eb:ef:b1:3a:37:87:3d:a8:44:1d:81:ed:6a (none) (RSA)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, extract the public key from the agent in a form suitable for inclusion
into a &lt;span class=&#34;underline&#34;&gt;~/.ssh/authorized_keys&lt;/span&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-add -L
ssh-rsa AAAAB3NzaC1yc2EAA[…truncated output…]KhJHfdIcCMRF (none)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;un-categorized-topics&#34;&gt;Un-categorized topics&lt;/h1&gt;

&lt;h2 id=&#34;entropy&#34;&gt;Entropy&lt;/h2&gt;

&lt;p&gt;A measurement randomness. Though the universe is said to be truly random, more
often than not its &lt;em&gt;NOT&lt;/em&gt;. The reason the universe is random is a subject in its own, but in computer world&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pmallappa.github.io/quotes/first/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pmallappa.github.io/quotes/first/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>